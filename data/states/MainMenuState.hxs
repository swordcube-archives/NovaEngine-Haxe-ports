import backend.modding.ModUtil;

var starFG:FlxBackdrop;
var starBG:FlxBackdrop;

var redImpostor:FlxSprite;
var greenImpostor:FlxSprite;

var vignette:FlxSprite;

var optionShit:Array<String> = ['Story Mode', 'Freeplay', 'Gallery', 'Credits', 'Options', 'Shop', 'Innersloth'];
var menuItems:FlxTypedGroup;

var usingMouse:Bool = false;
var canClick:Bool = true;

var selectedSomethin:Bool = false;
var curSelected:Int = 0;

function onCreate() {
    runDefaultCode = false;

    starFG = new FlxBackdrop(Paths.image('impostor/menuShit/starFG'), 1, 1, true, true);
    starFG.updateHitbox();
    starFG.scrollFactor.set();
    add(starFG);

    starBG = new FlxBackdrop(Paths.image('impostor/menuShit/starBG'), 1, 1, true, true);
    starBG.updateHitbox();
    starBG.scrollFactor.set();
    add(starBG);

    redImpostor = new FlxSprite(350, -160);
    redImpostor.frames = Paths.getSparrowAtlas('impostor/menuShit/redMenu');
    redImpostor.animation.addByPrefix('idle', 'red idle', 24, true);
    redImpostor.animation.addByPrefix('select', 'red select', 24, false);
    redImpostor.animation.play('idle');
    redImpostor.updateHitbox();
    redImpostor.active = true;
    redImpostor.scale.set(0.7, 0.7);
    redImpostor.scrollFactor.set();
    add(redImpostor);

    greenImpostor = new FlxSprite(-300, -60);
    greenImpostor.frames = Paths.getSparrowAtlas('impostor/menuShit/greenmenu');
    greenImpostor.animation.addByPrefix('idle', 'green idle', 24, true);
    greenImpostor.animation.addByPrefix('select', 'green select', 24, false);
    greenImpostor.animation.play('idle');
    greenImpostor.updateHitbox();
    greenImpostor.active = true;
    greenImpostor.scale.set(0.7, 0.7);
    greenImpostor.scrollFactor.set();
    add(greenImpostor);

    vignette = new FlxSprite(0, 0).loadGraphic(Paths.image('impostor/menuShit/vignette'));
    vignette.updateHitbox();
    vignette.active = false;
    vignette.scrollFactor.set();
    add(vignette);

    menuItems = new FlxTypedGroup();
    add(menuItems);

    var tex = Paths.getSparrowAtlas('FNF_main_menu_assets');

    for(i in 0...optionShit.length) {
        var testButton:FlxSprite = new FlxSprite(0, 130);
        testButton.ID = i;

        if(i > 3)
            testButton.frames = Paths.getSparrowAtlas('impostor/menuShit/Buttons_UI');
        else
            testButton.frames = Paths.getSparrowAtlas('impostor/menuShit/Big_Buttons_UI');

        testButton.animation.addByPrefix('idle', optionShit[i] + ' Button', 24, true);
        testButton.animation.addByPrefix('hover', optionShit[i] + ' Select', 24, true);
        testButton.animation.play('idle');
        testButton.scale.set(0.50 ,0.50);
        testButton.updateHitbox();
        testButton.screenCenter(FlxAxes.X);
        testButton.scrollFactor.set();

        switch(i) {
            case 0:
                testButton.setPosition(400, 475);
            case 1:
                testButton.setPosition(633, 475);
            case 2:
                testButton.setPosition(400, 580);
            case 3:
                testButton.setPosition(633, 580);
            case 4:
                testButton.setPosition(455, 640);
            case 5:
                testButton.setPosition(590, 640);
            case 6:
                testButton.setPosition(725, 640);
        }
        menuItems.add(testButton);
    }		

    add(menuItems);

    var logo:FlxSprite = new FlxSprite(0, 100);
    logo.frames = Paths.getSparrowAtlas('menus/base/title/logoBumpin');
    logo.animation.addByPrefix('bump', 'logo bumpin', 24, false);
    logo.screenCenter();
    logo.updateHitbox();
    logo.scale.set(0.65, 0.65);
    logo.y -= 160;
    add(logo);

    var modMetaData = ModUtil.metadataMap.get(ModUtil.currentMod);
		
    if(modMetaData == null)
        modMetaData = ModUtil.metadataMap.get(ModUtil.fallbackMod);

    var engineString:String = (
        'VS Impostor v4.1.0\n'+
        Main.engineName+' v'+Main.engineVersion+' - Press '+CoolUtil.keyToString(Controls.controlsList["SWITCH_MOD"][0])+' to switch mods'
    );
    var engineText = new FlxText(5, FlxG.height, 0, engineString);
    engineText.setFormat(Paths.font("vcr.ttf"), 16, 0xFFFFFFFF, FlxTextAlign.LEFT, FlxTextBorderStyle.OUTLINE, 0xFF000000);
    engineText.scrollFactor.set();
    engineText.y -= engineText.height;
    add(engineText);
}

function onUpdate(elapsed) {
    if(!selectedSomethin && controls.BACK) {
        CoolUtil.playMenuSFX(2);
        FlxG.switchState(new states.menus.TitleState());
    }

    if(controls.SWITCH_MOD) {
        persistentUpdate = false;
        persistentDraw = true;
        openSubState(new states.menus.ModSwitcher());
    }

    if(FlxG.keys.justPressed.SEVEN)
        FlxG.switchState(new ModState("HelperAccessState"));

    menuItems.forEach((spr:FlxSprite) -> {
        if(usingMouse) {
            if(!FlxG.mouse.overlaps(spr))
                spr.animation.play('idle');
        }

        if (FlxG.mouse.overlaps(spr)) {
            if(canClick) {
                curSelected = spr.ID;
                usingMouse = true;
                spr.animation.play('hover');
            }
                
            if(FlxG.mouse.pressed && canClick) {
                switch (optionShit[curSelected]) {
                    case 'Gallery':
                        FlxG.openURL('https://vsimpostor.com/');
                    case 'Innersloth':
                        FlxG.openURL('https://www.innersloth.com/');
                    default: 
                        selectSomething();
                }
            }
        }

        starFG.x -= FlxG.elapsed * 60 * 0.03;
        starBG.x -= FlxG.elapsed * 60 * 0.01;

        spr.updateHitbox();
    });
}

function selectSomething() {
    selectedSomethin = true;
    canClick = false;

    greenImpostor.animation.play('select');
    redImpostor.animation.play('select');

    CoolUtil.playMenuSFX(1);

    canClick = false;

    menuItems.forEach((spr:FlxSprite) -> {
        if (curSelected != spr.ID) {
            FlxTween.tween(starFG, {y: starFG.y + 500}, 0.7, {ease: FlxEase.quadInOut});
            FlxTween.tween(starBG, {y: starBG.y + 500}, 0.7, {ease: FlxEase.quadInOut, startDelay: 0.2});
            FlxTween.tween(greenImpostor, {y: greenImpostor.y + 800}, 0.7, {ease: FlxEase.quadInOut, startDelay: 0.24});
            FlxTween.tween(redImpostor, {y: redImpostor.y + 800}, 0.7, {ease: FlxEase.quadInOut, startDelay: 0.3});
            FlxG.camera.fade(FlxColor.BLACK, 0.7, false);
            FlxTween.tween(spr, {alpha: 0}, 1.3, {
                ease: FlxEase.quadOut,
                onComplete: function(twn:FlxTween)
                {
                    spr.kill();
                }
            });
        } else {
            FlxTween.tween(starFG, {y: starFG.y + 500}, 1, {ease: FlxEase.quadInOut});
            FlxTween.tween(starBG, {y: starBG.y + 500}, 1, {ease: FlxEase.quadInOut, startDelay: 0.2});
            FlxTween.tween(greenImpostor, {y: greenImpostor.y + 800}, 0.7, {ease: FlxEase.quadInOut, startDelay: 0.24});
            FlxTween.tween(redImpostor, {y: redImpostor.y + 800}, 0.7, {ease: FlxEase.quadInOut, startDelay: 0.3});
            FlxG.camera.fade(FlxColor.BLACK, 0.7, false);
            new FlxTimer().start(1, function(tmr:FlxTimer) {
                goToState();
            });
        }
    });
}

function goToState() {
    switch (optionShit[curSelected]) {
        case 'Story Mode':
            FlxG.switchState(new states.menus.StoryMenuState());
            trace("Story Menu Selected");
        case 'Freeplay':
            FlxG.switchState(new states.menus.FreeplayState());
            trace("Freeplay Menu Selected");
        case 'Shop':
            FlxG.switchState(new ModState("ShopState"));
            trace("Shop Menu Selected");
        case 'Options':
            FlxG.switchState(new states.menus.OptionsMenuState());
            trace("Options Menu Selected");
        case 'Credits':
            FlxG.switchState(new ModState("Credits"));
            trace("Gallery Menu Selected");
    }		
}